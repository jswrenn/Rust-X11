var searchIndex = {};
searchIndex['X11'] = {"items":[[0,"","X11",""],[1,"Connection","","Represents a connection to an X server.\nWill automatically disconnect from the X server at end of object lifetime.\nGuaranteed to be a valid connection upon successful construction **but not after**."],[1,"Setup","","See: http://xcb.freedesktop.org/manual/group__XCB__Core__API.html#gafc379a27800bf735818a0760bd036321"],[1,"Screen","",""],[1,"RequestError","",""],[1,"RequestDelay","","Represents a request that is waiting to be sent.\nFlushes all pending requests upon destruction."],[1,"Coordinate","","A 2D coordinate where (0, 0) is the upper left corner."],[11,"x","","",0],[11,"y","","",0],[1,"RectangularSize","","A simple representation for the size of a rectangle."],[11,"width","","",1],[11,"height","","",1],[0,"connection_error","",""],[2,"ConnectionError","X11::connection_error",""],[12,"Generic","","Socket error, pipe error, or other stream error",2],[12,"ExtNotSupported","","Extension not supported",2],[12,"MemInsufficient","","Memory not available",2],[12,"ReqLenExceeded","","Exceeding request length for server",2],[12,"ParseErr","","Unable to parse display string",2],[12,"InvalidScreen","","No screen matching display on server\n(The display is usually specified with the $DISPLAY environment variable.)",2],[12,"FDPassingFailure","","File descriptor passing operation failure\n(This is not explicitly stated as a possible return value in the comments\nabove the declaration of xcb_connection_has_error in xcb.h, but it is\nimplied as a possible return value from the macro definition\nXCB_CONN_CLOSED_FDPASSING_FAILED.)",2],[10,"rand","","",2],[10,"eq","","",2],[10,"ne","","",2],[10,"fmt","","",2],[0,"connection_status","X11",""],[2,"ConnectionStatus","X11::connection_status",""],[12,"Valid","","",3],[12,"Invalid","","",3],[0,"window","X11",""],[1,"Window","X11::window",""],[2,"InvariantStatus","",""],[12,"Valid","","",4],[12,"Invalid","","",4],[2,"InvariantError","",""],[12,"NotNonNull","","",5],[12,"NotWithinUpperBound","","",5],[10,"decode","","",6],[10,"encode","","",6],[10,"hash","","",6],[10,"cmp","","",6],[10,"partial_cmp","","",6],[10,"lt","","",6],[10,"le","","",6],[10,"gt","","",6],[10,"ge","","",6],[10,"eq","","",6],[10,"ne","","",6],[10,"fmt","","",6],[10,"is_non_null","","",6],[10,"is_within_upper_bound","","",6],[10,"meets_invariant","","Determine whether or not `self` respects the invariant.",6],[10,"test_invariant","","Determine whether or not `self` respects the invariant,\nand if not, return the first error found.",6],[10,"assume","","Construct by assuming `data` satifies the invariant.",6],[10,"new","","Optionally construct depending on whether `data` satisfies the invariant.",6],[10,"new_or_err","","Optionally construct depending on whether `data` satisfies the invariant,\nand if not, return the first error found.",6],[10,"as_window_int","","Get the underlying data to be free from invariant restrictions.",6],[0,"screen_setup","X11",""],[1,"ScreenSetup","X11::screen_setup",""],[1,"Items","",""],[10,"new","","",7],[10,"iter","","",7],[10,"next","","",8],[0,"window_geometry","X11",""],[1,"Cookie","X11::window_geometry",""],[1,"WindowGeometry","","Holds the position, size, and border width of a window."],[1,"Reply","","The reply from the X server holding the requested window's geometetrical information."],[3,"make_request","",""],[10,"fmt","","",9],[10,"wait_for_reply","","",9],[10,"drop","","",9],[10,"fmt","","",10],[10,"new","","",10],[10,"position","","",10],[10,"size","","",10],[10,"border_width","","",10],[10,"geometry","","All geometerical information of the requested Window.",11],[10,"position","","The position of the requested window.",11],[10,"size","","The size of the requested window.",11],[10,"border_width","","The size of the border around the requested window.",11],[10,"drop","","",11],[0,"window_children","X11",""],[1,"Cookie","X11::window_children",""],[1,"Reply","",""],[1,"WindowChildren","",""],[1,"Items","",""],[3,"make_request","",""],[10,"fmt","","",12],[10,"wait_for_reply","","",12],[10,"drop","","",12],[10,"children","","",13],[10,"drop","","",13],[10,"iter","","",14],[10,"next","","",15],[0,"window_attribute","X11",""],[1,"WindowSubAttributeSet","X11::window_attribute","See documentation for WindowAttributeSet."],[11,"background_pixmap","","",16],[11,"bit_gravity","","",16],[11,"win_gravity","","",16],[11,"backing_store","","",16],[11,"event_set","","",16],[11,"colormap_set","","",16],[11,"cursor_set","","",16],[1,"WindowMainAttributeSet","",""],[1,"WindowAttributeSet","","A `struct` which can be modeled as an algebraic datatype consisting of a\nunique data constructor for each element of the 15-ary Cartesian product\nof `back_pixmap` × `back_pixel` × ... × `cursor` where `back_pixmap`,\n`back_pixel`, ... and `cursor` are modeled as sets each equal to\n{ “on”, “off” }. (i.e.\n ```\ndata WindowAttributeSet = back_pixmap_on__back_pixel_on__...__cursor_on\n                        | back_pixmap_off__back_pixel_on__...__cursor_on\n                        | back_pixmap_off__back_pixel_off__...__cursor_on\n                        ...\n                        -- Obviously listing 2¹⁵ data constructors is impractical.\n ```\n)\nIndicate the data constructor one intends to use via the `main_attributes`\nfield.\nAdditionally, some of the data constructors (specifically the ones indicating\nthat `back_pixmap`, `bit_gravity`, `win_gravity`, `backing_store`, `event`,\n`colormap`, or `cursor` are “on”) take arguments.\nIndicate the arguments to the data constructor one intends to use via the\n`sub_attributes` field."],[11,"main_attributes","","",17],[11,"sub_attributes","","",17],[0,"background_pixmap","",""],[1,"BackgroundPixmap","X11::window_attribute::background_pixmap",""],[10,"eq","","",18],[10,"ne","","",18],[10,"fmt","","",18],[10,"new","","",18],[10,"is_pixmap","","",18],[10,"as_u32","","",18],[10,"default","","",18],[0,"border_pixmap","X11::window_attribute",""],[1,"BorderPixmap","X11::window_attribute::border_pixmap",""],[10,"eq","","",19],[10,"ne","","",19],[10,"fmt","","",19],[10,"new","","",19],[10,"is_pixmap","","",19],[10,"as_u32","","",19],[10,"default","","",19],[0,"bit_gravity","X11::window_attribute",""],[2,"BitGravity","X11::window_attribute::bit_gravity",""],[12,"BitForget","","",20],[12,"NorthWest","","",20],[12,"North","","",20],[12,"NorthEast","","",20],[12,"West","","",20],[12,"Center","","",20],[12,"East","","",20],[12,"SouthWest","","",20],[12,"South","","",20],[12,"Static","","",20],[4,"BitGravityInt","",""],[10,"fmt","","",20],[0,"win_gravity","X11::window_attribute",""],[2,"WinGravity","X11::window_attribute::win_gravity",""],[12,"WinUnmap","","",21],[12,"NorthWest","","",21],[12,"North","","",21],[12,"NorthEast","","",21],[12,"West","","",21],[12,"Center","","",21],[12,"East","","",21],[12,"SouthWest","","",21],[12,"South","","",21],[12,"Static","","",21],[4,"WinGravityInt","",""],[10,"fmt","","",21],[0,"backing_store","X11::window_attribute",""],[2,"BackingStore","X11::window_attribute::backing_store",""],[12,"NotUseful","","",22],[12,"WhenMapped","","",22],[12,"Always","","",22],[4,"BackingStoreInt","",""],[10,"fmt","","",22],[0,"event","X11::window_attribute",""],[1,"EventSet","X11::window_attribute::event",""],[4,"EventInt","",""],[5,"no_event","",""],[5,"key_press","",""],[5,"key_release","",""],[5,"button_press","",""],[5,"button_release","",""],[5,"enter_window","",""],[5,"leave_window","",""],[5,"pointer_motion","",""],[5,"motion_hint","",""],[5,"button_1_motion","",""],[5,"button_2_motion","",""],[5,"button_3_motion","",""],[5,"button_4_motion","",""],[5,"button_5_motion","",""],[5,"button_motion","",""],[5,"keymap_state","",""],[5,"exposure","",""],[5,"visibility_change","",""],[5,"structure_notify","",""],[5,"resize_redirect","",""],[5,"substructure_notify","",""],[5,"substructure_redirect","",""],[5,"focus_change","",""],[5,"property_change","",""],[5,"color_map_change","",""],[5,"owner_grap_button","",""],[10,"hash","","",23],[10,"cmp","","",23],[10,"partial_cmp","","",23],[10,"lt","","",23],[10,"le","","",23],[10,"gt","","",23],[10,"ge","","",23],[10,"clone","","",23],[10,"eq","","",23],[10,"ne","","",23],[10,"fmt","","",23],[10,"empty","","Returns an empty set of flags.",23],[10,"all","","Returns the set containing all flags.",23],[10,"bits","","Returns the raw value of the flags currently stored.",23],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",23],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",23],[10,"is_empty","","Returns `true` if no flags are currently stored.",23],[10,"is_all","","Returns `true` if all flags are currently set.",23],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",23],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",23],[10,"insert","","Inserts the specified flags in-place.",23],[10,"remove","","Removes the specified flags in-place.",23],[10,"bitor","","Returns the union of the two sets of flags.",23],[10,"bitand","","Returns the intersection between the two sets of flags.",23],[10,"sub","","Returns the set difference of the two sets of flags.",23],[10,"not","","Returns the complement of this set of flags.",23],[0,"colormap","X11::window_attribute",""],[1,"ColormapSet","X11::window_attribute::colormap",""],[4,"ColormapInt","",""],[5,"none","",""],[10,"hash","","",24],[10,"cmp","","",24],[10,"partial_cmp","","",24],[10,"lt","","",24],[10,"le","","",24],[10,"gt","","",24],[10,"ge","","",24],[10,"clone","","",24],[10,"eq","","",24],[10,"ne","","",24],[10,"fmt","","",24],[10,"empty","","Returns an empty set of flags.",24],[10,"all","","Returns the set containing all flags.",24],[10,"bits","","Returns the raw value of the flags currently stored.",24],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",24],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",24],[10,"is_empty","","Returns `true` if no flags are currently stored.",24],[10,"is_all","","Returns `true` if all flags are currently set.",24],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",24],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",24],[10,"insert","","Inserts the specified flags in-place.",24],[10,"remove","","Removes the specified flags in-place.",24],[10,"bitor","","Returns the union of the two sets of flags.",24],[10,"bitand","","Returns the intersection between the two sets of flags.",24],[10,"sub","","Returns the set difference of the two sets of flags.",24],[10,"not","","Returns the complement of this set of flags.",24],[0,"cursor","X11::window_attribute",""],[1,"CursorSet","X11::window_attribute::cursor",""],[4,"CursorInt","",""],[5,"none","",""],[10,"hash","","",25],[10,"cmp","","",25],[10,"partial_cmp","","",25],[10,"lt","","",25],[10,"le","","",25],[10,"gt","","",25],[10,"ge","","",25],[10,"clone","","",25],[10,"eq","","",25],[10,"ne","","",25],[10,"fmt","","",25],[10,"empty","","Returns an empty set of flags.",25],[10,"all","","Returns the set containing all flags.",25],[10,"bits","","Returns the raw value of the flags currently stored.",25],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",25],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",25],[10,"is_empty","","Returns `true` if no flags are currently stored.",25],[10,"is_all","","Returns `true` if all flags are currently set.",25],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",25],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",25],[10,"insert","","Inserts the specified flags in-place.",25],[10,"remove","","Removes the specified flags in-place.",25],[10,"bitor","","Returns the union of the two sets of flags.",25],[10,"bitand","","Returns the intersection between the two sets of flags.",25],[10,"sub","","Returns the set difference of the two sets of flags.",25],[10,"not","","Returns the complement of this set of flags.",25],[4,"WindowMainAttributeInt","X11::window_attribute","A bitmask of 15 flags where the flags are `back_pixmap`, `back_pixel`, ... `cursor`."],[5,"background_pixmap","",""],[5,"background_pixel","",""],[5,"border_pixmap","",""],[5,"border_pixel","",""],[5,"bit_gravity","",""],[5,"win_gravity","",""],[5,"backing_store","",""],[5,"backing_planes","",""],[5,"backing_pixel","",""],[5,"override_reddirect","",""],[5,"save_under","",""],[5,"event","",""],[5,"dont_propagate","",""],[5,"colormap","",""],[5,"cursor","",""],[10,"fmt","","",16],[10,"new","","",16],[10,"to_array_for_attr","","",16],[10,"hash","","",26],[10,"cmp","","",26],[10,"partial_cmp","","",26],[10,"lt","","",26],[10,"le","","",26],[10,"gt","","",26],[10,"ge","","",26],[10,"clone","","",26],[10,"eq","","",26],[10,"ne","","",26],[10,"fmt","","",26],[10,"empty","","Returns an empty set of flags.",26],[10,"all","","Returns the set containing all flags.",26],[10,"bits","","Returns the raw value of the flags currently stored.",26],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",26],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",26],[10,"is_empty","","Returns `true` if no flags are currently stored.",26],[10,"is_all","","Returns `true` if all flags are currently set.",26],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",26],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",26],[10,"insert","","Inserts the specified flags in-place.",26],[10,"remove","","Removes the specified flags in-place.",26],[10,"bitor","","Returns the union of the two sets of flags.",26],[10,"bitand","","Returns the intersection between the two sets of flags.",26],[10,"sub","","Returns the set difference of the two sets of flags.",26],[10,"not","","Returns the complement of this set of flags.",26],[10,"fmt","","",17],[10,"new","","",17],[10,"main_attributes","","",17],[10,"sub_attributes","","",17],[10,"sub_attribute_array","","",17],[0,"input","X11",""],[1,"Keycode","X11::input",""],[0,"modkey","",""],[1,"ModkeySet","X11::input::modkey",""],[4,"ModkeyInt","",""],[5,"shift","",""],[5,"lock","",""],[5,"control","",""],[5,"mod_1","",""],[5,"mod_2","",""],[5,"mod_3","",""],[5,"mod_4","",""],[5,"mod_5","",""],[5,"any","",""],[10,"hash","","",27],[10,"cmp","","",27],[10,"partial_cmp","","",27],[10,"lt","","",27],[10,"le","","",27],[10,"gt","","",27],[10,"ge","","",27],[10,"clone","","",27],[10,"eq","","",27],[10,"ne","","",27],[10,"fmt","","",27],[10,"empty","","Returns an empty set of flags.",27],[10,"all","","Returns the set containing all flags.",27],[10,"bits","","Returns the raw value of the flags currently stored.",27],[10,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",27],[10,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",27],[10,"is_empty","","Returns `true` if no flags are currently stored.",27],[10,"is_all","","Returns `true` if all flags are currently set.",27],[10,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",27],[10,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",27],[10,"insert","","Inserts the specified flags in-place.",27],[10,"remove","","Removes the specified flags in-place.",27],[10,"bitor","","Returns the union of the two sets of flags.",27],[10,"bitand","","Returns the intersection between the two sets of flags.",27],[10,"sub","","Returns the set difference of the two sets of flags.",27],[10,"not","","Returns the complement of this set of flags.",27],[0,"pointer_mode","X11::input",""],[2,"PointerMode","X11::input::pointer_mode",""],[12,"Sync","","",28],[12,"Async","","",28],[4,"PointerModeInt","",""],[10,"fmt","","",28],[0,"keyboard_mode","X11::input",""],[2,"KeyboardMode","X11::input::keyboard_mode",""],[12,"Sync","","",29],[12,"Async","","",29],[4,"KeyboardModeInt","",""],[10,"fmt","","",29],[0,"pointer_event_mode","X11::input",""],[2,"PointerEventMode","X11::input::pointer_event_mode",""],[12,"SendOnlyToGrabbed","","",30],[12,"SendAlsoToPointed","","",30],[4,"PointerEventModeInt","",""],[10,"fmt","","",30],[4,"KeycodeInt","X11::input",""],[10,"fmt","","",31],[10,"data","","",31],[4,"WindowInt","X11","An integral type capable of representing a `Window`."],[6,"Cookie","","Implementors of this trait represent a pending reply from the X server made via an asynchronous\nrequest."],[9,"wait_for_reply","","",32],[6,"Reply","",""],[10,"fmt","","",33],[10,"screen_setup","","",34],[10,"fmt","","",35],[10,"root_window","","",35],[10,"drop","","",36],[10,"new","","",37],[10,"force","","Use force to flush all pending requests.\nThe RequestDelay called with the force method is moved into\nthe force method where its destructor is called (once).",37],[10,"subsume","","Use subsume to prevent *other* RequestDelays in the current scope\nfrom calling their destructors (and flushing pending requests).\nThe RequestDelay placed in the “other” parameter\nis moved into the subsume method where its destructor is made to do\nnothing.  No error can occur if subsume is not used, but it helps\ncontrol exactly when pending requests are flushed.",37],[10,"drop","","",37],[10,"new","","Construct a connection to the X server only if it can be shown to be an initially valid\nconnection.\nConnects to the X server specified by the $DISPLAY environment variable (if $DISPLAY\ncan be parsed).",33],[10,"new_with_default_screen","","Does the same as new() but also returns the default Screen if one exists.",33],[10,"status","","Test if connected to the X server and if not return why.",33],[10,"is_valid","","Test if connected to the X server.",33],[10,"flush","","",33],[10,"setup","","See: http://xcb.freedesktop.org/manual/group__XCB__Core__API.html#gafc379a27800bf735818a0760bd036321",33],[10,"make_window_geometry_request","","",33],[10,"make_window_children_request","","",33],[10,"change_window_attributes","","",33],[10,"grab_key_chord","","",33],[10,"drop","","Will disconnect the Connection from the X server.",33],[10,"fmt","","",0],[10,"fmt","","",1]],"paths":[[1,"Coordinate"],[1,"RectangularSize"],[2,"ConnectionError"],[2,"ConnectionStatus"],[2,"InvariantStatus"],[2,"InvariantError"],[1,"Window"],[1,"ScreenSetup"],[1,"Items"],[1,"Cookie"],[1,"WindowGeometry"],[1,"Reply"],[1,"Cookie"],[1,"Reply"],[1,"WindowChildren"],[1,"Items"],[1,"WindowSubAttributeSet"],[1,"WindowAttributeSet"],[1,"BackgroundPixmap"],[1,"BorderPixmap"],[2,"BitGravity"],[2,"WinGravity"],[2,"BackingStore"],[1,"EventSet"],[1,"ColormapSet"],[1,"CursorSet"],[1,"WindowMainAttributeSet"],[1,"ModkeySet"],[2,"PointerMode"],[2,"KeyboardMode"],[2,"PointerEventMode"],[1,"Keycode"],[6,"Cookie"],[1,"Connection"],[1,"Setup"],[1,"Screen"],[1,"RequestError"],[1,"RequestDelay"]]};
initSearch(searchIndex);
